# Import packages
#import unittest2 as unittest
import music21
from os import listdir
from os.path import isfile, join

# Import modules
from utils import *

# Tests go here
module_name = 'music_generation_module'
results_dir = 'results'

def compare_composed_key_n_requested(sent_score_mapped):
    """Compares requested tonic key with composed tonic key to ensure that
    LSTM model generates correct output.
    sent_score_mapped - sentiment score received after if was mapped onto tonic key value range
    """
    given_scores = sent_score_mapped
    counter = 0
    print '[+]' + green + ' Analysing {} files '.format(results_dir) + normal + '[+]'
    # Get music pieces that have been generated by LSTM model with requested tonic key
    available_files = [f for f in listdir("./{}/{}".format(module_name, results_dir)) if (isfile(join("./{}/{}".format(module_name, results_dir), f)) and (".mid" in f))]
    for iter, music in enumerate(available_files):
        name = music[:-4]
        score = music21.converter.parse("./{}/{}/{}".format(module_name, results_dir, music))
        key = score.analyze('key')
        print '{} is in {} key'.format(music, key.mode)
        result = 1 if key.mode=='major' else 0
        print "Key, that's required by mapped sentiment: {}; Key, that's been composed by LSTM model: {}".format(given_scores[iter], result)

        if result==given_scores[iter]:
            counter += 1
    print 'Percentage of correctly composed music pieces: {}'.format((counter/float(len(given_scores)))*100)

def compare_composed_complexity_n_requested(read_score_mapped):
    """Compares requested music complexity with composed complexity to ensure that
    LSTM model generates correct output.
    read_score_mapped - readability score received after if was mapped onto music complexity value range
    """
    given_scores = read_score_mapped
    counter = 0
    print '[+]' + green + ' Analysing {} files '.format(results_dir) + normal + '[+]'
    # Get music pieces that have been generated by LSTM model with requested complexity
    available_files = [f for f in listdir("./{}/{}".format(module_name, results_dir)) if (isfile(join("./{}/{}".format(module_name, results_dir), f)) and (".mid" in f))]
    for iter, music in enumerate(available_files):
        # Here goes function that would evaluate music complexity
        result = 1
        print "Key, that's required by mapped sentiment: {}; Key, that's been composed by LSTM model: {}".format(given_scores[iter], result)

        if result==given_scores[iter]:
            counter += 1
    print 'Percentage of correctly composed music pieces: {}'.format((counter/float(len(given_scores)))*100)

def run_tests(sent_score_mapped, read_score_mapped):
    compare_composed_key_n_requested(sent_score_mapped)
    compare_composed_complexity_n_requested(read_score_mapped)
